// –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω—É–∂–Ω—ã–µ –º–æ–¥—É–ª–∏
const fs = require("fs");  // –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
const express = require("express");  // –í–µ–±-—Å–µ—Ä–≤–µ—Ä

// –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ) —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
let redirects = require("./list.json");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ—Ä—Ç–∞
const app = express();  // –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Express
app.set("trust proxy", true);  // –î–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –ø—Ä–æ–∫—Å–∏ (X-Forwarded-For)
const REDIRECTS_PORT = process.env.REDIRECTS_PORT;  // –ü–æ—Ä—Ç –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç
const REDIRECTS_LOGS = process.env.REDIRECTS_LOGS === "true";  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Plausible
const PLAUSIBLE_URL = process.env.PLAUSIBLE_URL;
const PLAUSIBLE_API_KEY = process.env.PLAUSIBLE_API_KEY;

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö /go/*
app.get("/go/:key", (req, res) => {
  // –ö–ª—é—á –∏–∑ URL, –Ω–∞–ø—Ä–∏–º–µ—Ä: /go/google ‚Üí "google"
  const key = cleanInput(req.params.key, "key");  // ‚õî –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
  const target = redirects[key];  // –¶–µ–ª–µ–≤–æ–π URL –∏–∑ —Å–ª–æ–≤–∞—Ä—è

  // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –∑–∞–ø—Ä–æ—Å–∞
  const hostname = req.hostname;
  const originalUrl = cleanInput(req.originalUrl, "url");  // ‚õî –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
  const fullUrl = `https://${hostname}${originalUrl}`;

  // –ü–æ–ª—É—á–∞–µ–º IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const ip = getClientIp(req) || "unknown";  // ‚õî –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ

  // –ü–æ–ª—É—á–∞–µ–º User-Agent –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ (referer)
  const userAgent = cleanInput(req.get("user-agent"), "userAgent") || "unknown";  // ‚õî –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
  const referer = cleanInput(req.get("referer") || req.get("x-requested-with"), "referer") || "unknown";  // ‚õî –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ

  // –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—à–∏–±–∫–æ–π
  if (!target) {
    if (allowAction(ip)) logMessage(`üõë | IP: ${ip} | Referer: ${referer} | Redirect: ${fullUrl} -> 404 | User-Agent: ${userAgent}`, true);

    return res.redirect(302, "/404/");
  }

  // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–ª–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ
  if (allowAction(ip)) logMessage(`IP: ${ip} | Referer: ${referer} | Redirect: ${fullUrl} -> ${target} | User-Agent: ${userAgent}`, false, { hostname, key });

  // –î–µ–ª–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç
  res.set({
    'Cache-Control': 'no-store, no-cache, must-revalidate, proxy-revalidate',
    'Pragma': 'no-cache',
    'Expires': '0',
    'Surrogate-Control': 'no-store'
  });
  // const separator = target.includes('?') ? '&' : '?';
  // res.redirect(302, target + separator + 't=' + Date.now());
  res.redirect(302, target);

  // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  // logRequestSnapshot(req, { "my_referer": referer, "my_target": target, "my_ip": ip });  // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Plausible
  if (allowAction(ip)) sendToPlausible({ userAgent, ip, fullUrl, hostname, referer, target });
});

// –ö–æ–Ω—Ç—Ä–æ–ª—å —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
const limitStore = {};  
function allowAction(ip) {
  if (limitStore[ip]) return false;
  limitStore[ip] = true;
  setTimeout(() => delete limitStore[ip], 5000);
  return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP-–∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
function getClientIp(req) {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ IP –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
  function firstIpFromHeader(headerValue) {
    if (!headerValue) return null;

    let arr = [];

    if (Array.isArray(headerValue)) {
      arr = headerValue;  // ["1.2.3.4", "5.6.7.8"]  ‚Üí  arr = ["1.2.3.4", "5.6.7.8"]
    } else if (typeof headerValue === "string") {
      arr = headerValue.split(",").map(s => s.trim());  // "1.2.3.4, 5.6.7.8"  ‚Üí  arr = ["1.2.3.4", "5.6.7.8"]
    }

    // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    arr = arr.filter(s => Boolean(s));  // ["", "1.2.3.4"]  ‚Üí  ["1.2.3.4"]

    return arr[0] || null;
  }

  const cfFirstIp = firstIpFromHeader(req.headers["cf-connecting-ip"]);
  const xrFirstIp = firstIpFromHeader(req.headers["x-real-ip"]);
  const xfFirstIp = firstIpFromHeader(req.headers["x-forwarded-for"]);
  const clientIp = cfFirstIp || xrFirstIp || xfFirstIp || req.ip;

  return cleanInput(clientIp, "ip");  // ‚õî –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
}

/**
 * –§—É–Ω–∫—Ü–∏—è —á–∏—Å—Ç–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–æ–∫ (—É–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫, –æ–±—Ä–µ–∑–∞–µ–º –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç.–¥.)
 * @param {string | null | undefined} value –≤—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
 * @param {"key" | "url" | "referer" | "ip" | "userAgent"} type —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {string | null} –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ null
 */
function cleanInput(value, type) {
  if (!value) return null;

  switch(type) {
    case 'key':
      return /^[a-zA-Z0-9-]+$/.test(value) ? value : null;

    case 'url':
    case 'referer':
      return encodeURI(decodeURI(value))
        .replace(/'/g, '%27')
        .replace(/"/g, '%22')
        .slice(0, 1000);

    case 'ip':
      // IPv4: 1.2.3.4, IPv6: ::1 –∏–ª–∏ 2001:0db8:85a3:0000:0000:8a2e:0370:7334
      const ipv4 = /^(\d{1,3}\.){3}\d{1,3}$/.test(value) && value.split('.').every(n => n>=0 && n<=255);
      const ipv6 = /^[0-9a-fA-F:]+(%[0-9a-zA-Z]+)?$/.test(value);
      return (ipv4 || ipv6) ? value : null;

    case 'userAgent':
      return String(value).replace(/[\r\n]/g, ' ').slice(0, 1000);

    default:
      return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
function logMessage(message, isError = false, data) {
  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
  const timestamp = new Date().toLocaleString("sv-SE", { hour12: false }).replace("T", " "); // –§–æ—Ä–º–∞—Ç: "YYYY-MM-DD HH:MM:SS"
  const line = `[${timestamp}] | ${message}`;

  // –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
  if (isError) {
    console.error(line);
  } else {
    console.log(line);
  }

  // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
  if (REDIRECTS_LOGS) {
    // –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const logDir = "./logs";
    if (!fs.existsSync(logDir)) fs.mkdirSync(logDir, { recursive: true });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏
    let filePath = `${logDir}/system.log`;  // –ü—É—Ç—å –∏ –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (data && data.hostname && data.key) {
      const safeHost = data.hostname.replace(/[^a-zA-Z0-9-]/g, "_");
      const safeKey  =      data.key.replace(/[^a-zA-Z0-9-]/g, "_");
      filePath = `${logDir}/${safeHost}__${safeKey}.log`;
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    fs.appendFile(filePath, line + '\n', (err) => {
      if (err) console.error("üõë | File log error: ", err);
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Plausible
async function sendToPlausible({ userAgent, ip, fullUrl, hostname, referer, target }) {
  // –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Plausible (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω URL –∏ API-–∫–ª—é—á)
  if (!PLAUSIBLE_URL || !PLAUSIBLE_API_KEY) return;

  // –°–æ–∑–¥–∞—ë–º AbortController –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–æ–º
  const controller = new AbortController();
  const timeout = setTimeout(() => controller.abort(), 5000);

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ "outbound-click" –≤ Plausible
    const response = await fetch(PLAUSIBLE_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${PLAUSIBLE_API_KEY}`,
        "User-Agent": userAgent,
        "X-Forwarded-For": ip
      },
      body: JSON.stringify({
        name: "outbound-click",  // –ò–º—è —Å–æ–±—ã—Ç–∏—è
        url: fullUrl,
        domain: hostname,
        referrer: referer,
        props: { target }
      }),
      signal: controller.signal  // –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–æ–º
    });

    // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: fetch –Ω–µ –∫–∏–¥–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ 4xx/5xx
    if (!response.ok) {
      let errText = "";
      try { errText = await response.text(); } catch {}
      throw new Error(
        `Plausible responded with ${response.status} ${response.statusText}` +
        (errText ? ` ‚Äì ${errText.slice(0, 200)}` : "")
      );
    }
  } catch (err) {
    // –û—à–∏–±–∫–∏ Plausible –Ω–µ –¥–æ–ª–∂–Ω—ã –ª–æ–º–∞—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç
    logMessage("üõë | Plausible error: " + (err?.message || err), true);
  } finally {
    clearTimeout(timeout);  // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä, –¥–∞–∂–µ –µ—Å–ª–∏ fetch —É–ø–∞–ª
  }
}

// –ê–≤—Ç–æ-–ø–æ–¥—Ö–≤–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π list.json (–±–µ–∑ –ø–∞–¥–µ–Ω–∏–π –ø—Ä–∏ –±–∏—Ç–æ–º JSON)
let updateTimeout;
fs.watch("./list.json", (eventType) => {
  if (eventType === "change") {
    clearTimeout(updateTimeout);

    updateTimeout = setTimeout(() => {
      try {
        // –ß–∏—Ç–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç –∏ –ø–∞—Ä—Å–∏–º JSON
        redirects = JSON.parse(fs.readFileSync("./list.json", "utf8"));
        logMessage("‚úÖ | Redirect list updated!");
      } catch (err) {
        // –ï—Å–ª–∏ JSON –±–∏—Ç—ã–π ‚Äî –Ω–µ –ª–æ–º–∞–µ–º —Å–µ—Ä–≤–µ—Ä, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –≤ –ø–∞–º—è—Ç–∏
        logMessage("üõë | Error in list.json: " + err.message, true);
      }
    }, 5000); // –∂–¥—ë–º 5 —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ —Ñ–∞–π–ª –µ—â—ë —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–Ω–∏–º–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
function logRequestSnapshot(req, extra = {}, full = false) {
  if (full) {
    console.dir(req, { depth: 2, colors: true });
    return;
  }

  const data = {
    protocol: req.protocol,
    secure: req.secure,
    method: req.method,
    url: req.originalUrl,
    ip: req.ip,
    headers: req.headers,
    ...extra
  };

  console.dir(data, { depth: null, colors: true });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
app.listen(REDIRECTS_PORT, () => {
  logMessage(`‚úÖ | Redirect server running on port: ${REDIRECTS_PORT}`);
});
